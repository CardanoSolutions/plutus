(program
  (let
    (nonrec)
    (termbind (strict) (vardecl t (con string)) (con string "no"))
    (termbind (strict) (vardecl t (con string)) (con string "yes"))
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (lam
      ds
      Bool
      [
        [ { [ Bool_match ds ] Unit } (lam p (prod ) [ (lam a Unit a) Unit ]) ]
        (lam
          p
          (prod )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl thunk (con unit))
              [
                { [ Unit_match [ (lam a Unit a) Unit ] ] (con unit) }
                (lam p (prod ) (con unit ()))
              ]
            )
            (error Unit)
          )
        )
      ]
    )
  )
)