(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl evenDirect (fun (con integer) Bool))
        (lam
          n
          (con integer)
          [
            [
              [
                {
                  [
                    Bool_match
                    [
                      [
                        [
                          { ifThenElse Bool }
                          [ [ equalsInteger n ] (con integer 0) ]
                        ]
                        True
                      ]
                      False
                    ]
                  ]
                  (fun Unit Bool)
                }
                (lam thunk Unit True)
              ]
              (lam
                thunk
                Unit
                [ oddDirect [ [ subtractInteger n ] (con integer 1) ] ]
              )
            ]
            Unit
          ]
        )
      )
      (termbind
        (strict)
        (vardecl oddDirect (fun (con integer) Bool))
        (lam
          n
          (con integer)
          [
            [
              [
                {
                  [
                    Bool_match
                    [
                      [
                        [
                          { ifThenElse Bool }
                          [ [ equalsInteger n ] (con integer 0) ]
                        ]
                        True
                      ]
                      False
                    ]
                  ]
                  (fun Unit Bool)
                }
                (lam thunk Unit False)
              ]
              (lam
                thunk
                Unit
                [ evenDirect [ [ subtractInteger n ] (con integer 1) ] ]
              )
            ]
            Unit
          ]
        )
      )
      [ evenDirect (con integer 4) ]
    )
  )
)